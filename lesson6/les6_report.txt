Взята задача 7 из урока 3:
В одномерном массиве целых чисел определить два наименьших элемента.
Они могут быть как равны между собой (оба являться минимальными), так и различаться.

Рабочий массив был проанализирован в трех вариантах (в скобках занимаемая память):
1. Классический массив (680)
2. Кортеж (420)
3. Двухсвязный список (880)

Двухсвязный список плохо подходит для данной задачи. Кроме того, что требуется больше памяти,
но взятие элемента по индексу происходит за линейное время, а не константное.
Если бы такое представление данных занимало бы меньше памяти,
можно было бы преобразовать цикл в цикл последовательного перебора элементов.

Преобразование в кортеж, после формирования списка дает большую экономию в памяти
(выделенная под массив память, освобождена и может быть повторно использована.
Это может пригодится, если последующая обработка требует много дополнительной памяти)
Но преобразование массива в кортеж требует линейного времени.
Классическая дилемма, выбор между быстродействием и памятью.

В дополнение к заданию сделал задачу со звездочкой из 5 урока:
Написать программу сложения и умножения двух шестнадцатеричных чисел.
При этом каждое число представляется как коллекция, элементы которой — цифры числа.
Например, пользователь ввёл A2 и C4F. Нужно сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
Сумма чисел из примера: [‘C’, ‘F’, ‘1’], произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].

Задачу решил в общем виде: сложение и умножение чисел возможно в любой системе счисления с любым обозначением цифр
(в коде есть проверка для восьмеричной системы счисления).

